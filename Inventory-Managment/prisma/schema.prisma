generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id            String        @id @default(uuid())
  name          String
  userId        String
  billboards    Billboard[]   @relation("StoreToBillboard")
  categories    Category[]    @relation("StoreToCategory")
  subcategories Subcategory[] @relation("StoreToSubcategory")
  products      Product[]     @relation("StoreToProduct")
  sizes         Size[]        @relation("StoreToSize")
  gender        Gender[]      @relation("StoreToGender")
  colors        Color[]       @relation("StoreToColor")
  orders        Order[]       @relation("StoreToOrder")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id            String        @id @default(uuid())
  storeId       String // Foreign Key to Store
  store         Store         @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId   String // Foreign Key to Billboard
  billboard     Billboard     @relation(fields: [billboardId], references: [id])
  subcategories Subcategory[]
  name          String
  products      Product[]     @relation("CategoryToProduct")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Subcategory {
  id         String    @id @default(uuid())
  categoryId String // Foreign Key to Category
  category   Category  @relation(fields: [categoryId], references: [id])
  storeId    String // Foreign Key to Store
  store      Store     @relation("StoreToSubcategory", fields: [storeId], references: [id])
  name       String
  products   Product[] @relation("SubcategoryToProduct")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([storeId])
  @@index([categoryId])
}

model Product {
  id            String      @id @default(uuid())
  description   String
  storeId       String // Foreign Key to Store
  store         Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId    String // Foreign Key to Category
  category      Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  subcategoryId String // Foreign Key to Subcategory
  subcategory   Subcategory @relation("SubcategoryToProduct", fields: [subcategoryId], references: [id])
  name          String
  price         Decimal
  isFeatured    Boolean     @default(false)
  isTrending    Boolean     @default(false)
  isArchived    Boolean     @default(false)
  sizeId        String // Foreign Key to Size
  size          Size        @relation(fields: [sizeId], references: [id])
  genderId      String // Foreign Key to Size
  gender        Gender      @relation(fields: [genderId], references: [id])
  colorId       String // Foreign Key to Color
  color         Color       @relation(fields: [colorId], references: [id])
  images        Image[] // Relation to Image model
  orderItems    OrderItem[] // Relation to Order model
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([genderId])
  @@index([colorId])
  @@index([subcategoryId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String // Foreign Key to Store
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  totalPrice Decimal
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Gender {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToGender", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Image {
  id        String   @id @default(uuid())
  productId String // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}
